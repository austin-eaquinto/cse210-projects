Scripture Memorizer



Program
using System;

class Program
{
    static void Main(string[] args)
    {
        // Console.WriteLine("Hello Develop03 World!");

        Reference r = new Reference("John", 3, 16);
        string script = "For God so loved the world, that he gave " + 
        "his only begotten Son, that whosoever believeth in him " + 
        "should not perish, but have everlasting life.";

        Reference r2 = new Reference("Proverbs", 3, 5, 6);
        string proverb = "Trust in the Lord with all thine heart; and lean not unto thine own understanding. " +
        "In all thy ways acknowledge him, and he shall direct thy paths.";

        // Scripture class constructor called here in an instance/object.
        Scripture s = new Scripture(r, script);
        Scripture s1 = new Scripture(r2, proverb);
        // Console.WriteLine(s.GetDisplayText());

        // i need it to loop through until the user enters 'quit'
        // or all the words are hidden.
        Console.Clear();
        Console.WriteLine("Welcome to the Scripture Memorizer!");
        Console.WriteLine("Enter 'quit' to quit.");
        
        // Console.WriteLine(s.GetDisplayText());
        // Console.WriteLine(r.GetDisplayText());

        string hey = Console.ReadLine();
        // if (IsCompletelyHidden == false && variable != 'quit')
        // {
            // while (hey != "quit")
            // {
            //     // !s.IsCompletelyHidden()
            //     Console.ReadLine();
            //     s.HideRandomWords(3);
            
            //  Console.Clear();

            //     string verse = s.GetDisplayText();
            //     Console.WriteLine(verse);
            //     Console.WriteLine(r.GetDisplayText());
            //     hey = Console.ReadLine();

            //     if (s.IsCompletelyHidden())
            //     {
            //         Environment.Exit(0);
            //     }
            // }
            do {
                Console.ReadLine();
                s.HideRandomWords(3);
            
             Console.Clear();

                string verse = s.GetDisplayText();
                Console.WriteLine(verse);
                Console.WriteLine(r.GetDisplayText());
                hey = Console.ReadLine();

                if (s.IsCompletelyHidden())
                {
                    Environment.Exit(0);
                }
            }while (!s.IsCompletelyHidden() && hey != "quit");
        // }    
        // else
        // {
        //     Console.WriteLine();
        // }
    }
}
// enter 'quit' to end program.

---------------

using System;

class Program
{
    static void Main(string[] args)
    {
        // Console.WriteLine("Hello Develop03 World!");

        Reference r = new Reference("John", 3, 16);
        string script = "For God so loved the world, that he gave " + 
                        "his only begotten Son, that whosoever believeth in him " + 
                        "should not perish, but have everlasting life.";

        Reference r2 = new Reference("Proverbs", 3, 5, 6);
        string proverb = "Trust in the Lord with all thine heart; and lean not unto thine own understanding. " +
                         "In all thy ways acknowledge him, and he shall direct thy paths.";

        // Scripture class constructor called here in an instance/object.
        Scripture s = new Scripture(r, script);
        Scripture s1 = new Scripture(r2, proverb);
        // Console.WriteLine(s.GetDisplayText());

        Console.Clear();
        Console.WriteLine("Welcome to the Scripture Memorizer!");
        Console.WriteLine("Enter 'quit' to quit.");

        // Console.WriteLine(s.GetDisplayText());
        // Console.WriteLine(r.GetDisplayText());
        
        // while (!s.IsCompletelyHidden())
        // {
        //     string hey = Console.ReadLine();
        //     if (hey != "quit")
        //     {
        //         s.HideRandomWords(3);

        //         Console.Clear();

        //         string verse = s.GetDisplayText();
        //         Console.WriteLine(verse);
        //         Console.WriteLine(r.GetDisplayText());
        //     }
        //     else
        //     {
        //         break;
        //     }
        // }

        // while (!s.IsCompletelyHidden())
        // {
        //     string hey = Console.ReadLine();
        //     if (hey != "quit")
        //     {
        //         Console.Clear();
        //         string verse = s.GetDisplayText();
        //         Console.WriteLine(verse);
        //         Console.WriteLine(r.GetDisplayText());
        //         s.HideRandomWords(3);
        //         // if (s.HideRandomWords(3) < 3)
        //         // {
        //         //     Console.WriteLine(verse);
        //         //     Console.WriteLine(r.GetDisplayText());
        //         // }
        //     }
        //     else
        //     {
        //         break;
        //     }
        // }

        string verse = s.GetDisplayText();
        Console.WriteLine(verse);
        Console.WriteLine(r.GetDisplayText());
        do
        {
            string hey = Console.ReadLine();
            if (hey.ToLower() != "quit")
            {
                s.HideRandomWords(3);
                verse = s.GetDisplayText();
                Console.Clear();
                Console.WriteLine(r.GetDisplayText());
                Console.WriteLine(verse);
            }
            else
            {
                break;
            }
        }while (!s.IsCompletelyHidden());


    //     while (!s.IsCompletelyHidden())
    //     {
    //         Console.WriteLine(s.GetDisplayText());
    //         Console.WriteLine(r.GetDisplayText());

    //         string hey = Console.ReadLine();
    //         if (hey.ToLower() == "quit")
    //         {
    //             Console.WriteLine("exit");
    //             return;
    //         }

    //         s.HideRandomWords(3);
    //         Console.Clear();
    //     }
    //     Console.WriteLine(s.GetDisplayText());
    }
}


Scripture
using System;

public class Scripture
{
private Reference _reference;
private List<Word> _words;
    /* thinking the scripture needs to be put in as
    a list. each word is a different list item. this
    way the random word selector that replaces a word 
    with an underscore can use index positions as
    selections. */

    // the constructor? it gets called in the main Program.
    public Scripture(Reference reference, string text)
    {
        _words = new List<Word>();
        ConvertText(text);
        _reference = reference;
    }
    public void HideRandomWords(int numberToHide)
    {
        // calls the Random function and stores it in the variable 'random'
        Random random = new Random();
        int hiddenWords = 0;
        int wordsLeft = 0;
        foreach (Word w in _words)
        {
            if (!w.IsHidden())
            {
                wordsLeft++;
            }
        }
        if (wordsLeft < numberToHide)
        {
            numberToHide = wordsLeft;
        }
        // double check while loop
        while (hiddenWords < numberToHide)
        {
            int randomIndex = random.Next(_words.Count);
            if (!_words[randomIndex].IsHidden())
            {
                _words[randomIndex].Hide();
                hiddenWords++;
            }
            // Console.WriteLine(hiddenWords);

        }
        // first section sets the value
        // second compares the variable to numberToHide
        // third adds one to the variable each time it loops successfully
        // for (int number=0; number < numberToHide; number++)
        // {
        //     int randomIndex = random.Next(_words.Count);
        //     _words[randomIndex].Hide();
        // }
    }
    public string GetDisplayText()
    {
        string text = "";
        foreach (Word item in _words)
        {
            text += " " + item.GetDisplayText();
        }
        return text;
    }
    public bool IsCompletelyHidden()
    {
        return _words.All(word=>word.IsHidden());
        // foreach (Word w in _words)
        // {
        //     if (!w.IsHidden())
        //     {
        //         return false;
        //     }
        // }
        // return true;
    }
    private void ConvertText(string text)
    {
        string[] convert = text.Split(" ");

        foreach(string item in convert)
        {
            Word w = new Word(item);
            _words.Add(w);
        }
    }
}

/*  */



Reference
- each _variable is used in each Reference constructor
to store another variable (like book), which is a 
parameter in the Reference(). These variables (book, 
chapter, verse, startVerse) take in a value when the
Reference constructor is called into the Program.cs.
The values are entered in the Program, where changes
can be made. The Reference class is built, and for 
the purposes of this program, will not be changed from
what it is now.

Word